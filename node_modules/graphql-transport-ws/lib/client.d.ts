/**
 *
 * client
 *
 */
import { Sink, ID, Disposable } from './types';
import { SubscribePayload } from './message';
export declare type EventConnecting = 'connecting';
export declare type EventConnected = 'connected';
export declare type EventClosed = 'closed';
export declare type Event = EventConnecting | EventConnected | EventClosed;
export declare type EventListener<E extends Event> = E extends EventConnecting ? () => void : E extends EventConnected ? (socket: WebSocket) => void : E extends EventClosed ? (event: CloseEvent) => void : never;
/** Configuration used for the `create` client function. */
export interface ClientOptions {
    /** URL of the GraphQL server to connect. */
    url: string;
    /** Optional parameters that the client specifies when establishing a connection with the server. */
    connectionParams?: Record<string, unknown> | (() => Record<string, unknown>);
    /**
     * Should the connection be established immediately and persisted
     * or after the first listener subscribed.
     * @default true
     */
    lazy?: boolean;
    /**
     * How many times should the client try to reconnect on abnormal socket closure before it errors out?
     * @default 5
     */
    retryAttempts?: number;
    /**
     * How long should the client wait until attempting to retry.
     * @default 3 * 1000 (3 seconds)
     */
    retryTimeout?: number;
    /**
     * Register listeners before initialising the client. This way
     * you can ensure to catch all client relevant emitted events.
     * The listeners passed in will **always** be the first ones
     * to get the emitted event before other registered listeners.
     */
    on?: Partial<{
        [event in Event]: EventListener<event>;
    }>;
    /**
     * A custom WebSocket implementation to use instead of the
     * one provided by the global scope. Mostly useful for when
     * using the client outside of the browser environment.
     */
    webSocketImpl?: unknown;
    /**
     * A custom ID generator for identifying subscriptions.
     * The default uses the `crypto` module in the global scope
     * which is present for modern browsers. However, if
     * it can't be found, `Math.random` would be used instead.
     */
    generateID?: () => ID;
}
export interface Client extends Disposable {
    /**
     * Listens on the client which dispatches events about the socket state.
     */
    on<E extends Event>(event: E, listener: EventListener<E>): () => void;
    /**
     * Subscribes through the WebSocket following the config parameters. It
     * uses the `sink` to emit received data or errors. Returns a _cleanup_
     * function used for dropping the subscription and cleaning stuff up.
     */
    subscribe<T = unknown>(payload: SubscribePayload, sink: Sink<T>): () => void;
}
/** Creates a disposable GraphQL subscriptions client. */
export declare function createClient(options: ClientOptions): Client;
